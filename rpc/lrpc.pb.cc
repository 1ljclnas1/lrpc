// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lrpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lrpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lrpc {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
struct ResponseOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr serialized_response_;
  const ::lrpc::Error* error_;
}* Response_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* RpcMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcMessage_reflection_ = NULL;
struct RpcMessageOneofInstance {
  const ::lrpc::Request* request_;
  const ::lrpc::Response* response_;
}* RpcMessage_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Endpoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Endpoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndpointList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndpointList_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeepaliveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeepaliveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceName_reflection_ = NULL;
const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* NameService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_lrpc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_lrpc_2eproto() {
  protobuf_AddDesc_lrpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lrpc.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, method_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, serialized_request_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _is_default_instance_));
  Error_descriptor_ = file->message_type(1);
  static const int Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, errnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, msg_),
  };
  Error_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      -1,
      -1,
      -1,
      sizeof(Error),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _is_default_instance_));
  Response_descriptor_ = file->message_type(2);
  static const int Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, serialized_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, Body_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      Response_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _oneof_case_[0]),
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
  RpcMessage_descriptor_ = file->message_type(3);
  static const int RpcMessage_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RpcMessage_default_oneof_instance_, request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RpcMessage_default_oneof_instance_, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, Body_),
  };
  RpcMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RpcMessage_descriptor_,
      RpcMessage::default_instance_,
      RpcMessage_offsets_,
      -1,
      -1,
      -1,
      RpcMessage_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, _oneof_case_[0]),
      sizeof(RpcMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, _is_default_instance_));
  Endpoint_descriptor_ = file->message_type(4);
  static const int Endpoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, port_),
  };
  Endpoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Endpoint_descriptor_,
      Endpoint::default_instance_,
      Endpoint_offsets_,
      -1,
      -1,
      -1,
      sizeof(Endpoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, _is_default_instance_));
  EndpointList_descriptor_ = file->message_type(5);
  static const int EndpointList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndpointList, endpoints_),
  };
  EndpointList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EndpointList_descriptor_,
      EndpointList::default_instance_,
      EndpointList_offsets_,
      -1,
      -1,
      -1,
      sizeof(EndpointList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndpointList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndpointList, _is_default_instance_));
  KeepaliveInfo_descriptor_ = file->message_type(6);
  static const int KeepaliveInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepaliveInfo, servicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepaliveInfo, endpoint_),
  };
  KeepaliveInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeepaliveInfo_descriptor_,
      KeepaliveInfo::default_instance_,
      KeepaliveInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(KeepaliveInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepaliveInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepaliveInfo, _is_default_instance_));
  ServiceName_descriptor_ = file->message_type(7);
  static const int ServiceName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceName, name_),
  };
  ServiceName_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServiceName_descriptor_,
      ServiceName::default_instance_,
      ServiceName_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServiceName),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceName, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceName, _is_default_instance_));
  Status_descriptor_ = file->message_type(8);
  static const int Status_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, result_),
  };
  Status_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      -1,
      -1,
      -1,
      sizeof(Status),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _is_default_instance_));
  MessageType_descriptor_ = file->enum_type(0);
  NameService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lrpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RpcMessage_descriptor_, &RpcMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Endpoint_descriptor_, &Endpoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EndpointList_descriptor_, &EndpointList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeepaliveInfo_descriptor_, &KeepaliveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServiceName_descriptor_, &ServiceName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Status_descriptor_, &Status::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lrpc_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
  delete Response::default_instance_;
  delete Response_default_oneof_instance_;
  delete Response_reflection_;
  delete RpcMessage::default_instance_;
  delete RpcMessage_default_oneof_instance_;
  delete RpcMessage_reflection_;
  delete Endpoint::default_instance_;
  delete Endpoint_reflection_;
  delete EndpointList::default_instance_;
  delete EndpointList_reflection_;
  delete KeepaliveInfo::default_instance_;
  delete KeepaliveInfo_reflection_;
  delete ServiceName::default_instance_;
  delete ServiceName_reflection_;
  delete Status::default_instance_;
  delete Status_reflection_;
}

void protobuf_AddDesc_lrpc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_lrpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nlrpc.proto\022\004lrpc\"\\\n\007Request\022\n\n\002id\030\001 \001("
    "\005\022\024\n\014service_name\030\002 \001(\t\022\023\n\013method_name\030\003"
    " \001(\t\022\032\n\022serialized_request\030\004 \001(\014\"$\n\005Erro"
    "r\022\016\n\006errnum\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\"[\n\010Respon"
    "se\022\n\n\002id\030\001 \001(\005\022\035\n\023serialized_response\030\002 "
    "\001(\014H\000\022\034\n\005error\030\003 \001(\0132\013.lrpc.ErrorH\000B\006\n\004B"
    "ody\"Z\n\nRpcMessage\022 \n\007request\030\001 \001(\0132\r.lrp"
    "c.RequestH\000\022\"\n\010response\030\002 \001(\0132\016.lrpc.Res"
    "ponseH\000B\006\n\004Body\"$\n\010Endpoint\022\n\n\002ip\030\001 \001(\t\022"
    "\014\n\004port\030\002 \001(\005\"1\n\014EndpointList\022!\n\tendpoin"
    "ts\030\001 \003(\0132\016.lrpc.Endpoint\"F\n\rKeepaliveInf"
    "o\022\023\n\013serviceName\030\001 \001(\t\022 \n\010endpoint\030\002 \001(\013"
    "2\016.lrpc.Endpoint\"\033\n\013ServiceName\022\014\n\004name\030"
    "\001 \001(\t\"\030\n\006Status\022\016\n\006result\030\001 \001(\005*\316\001\n\013Mess"
    "ageType\022\024\n\020HEARTBEAT_PACKET\020\000\022\030\n\024RPC_SER"
    "VICE_REGISTER\020\001\022!\n\035RPC_SERVICE_REGISTER_"
    "RESPONSE\020\002\022\030\n\024RPC_SERVICE_DISCOVER\020\003\022!\n\035"
    "RPC_SERVICE_DISCOVER_RESPONSE\020\004\022\026\n\022RPC_M"
    "ETHOD_REQUEST\020\005\022\027\n\023RPC_METHOD_RESPONSE\020\006"
    "2x\n\013NameService\0227\n\014GetEndpoints\022\021.lrpc.S"
    "erviceName\032\022.lrpc.EndpointList\"\000\0220\n\tKeep"
    "alive\022\023.lrpc.KeepaliveInfo\032\014.lrpc.Status"
    "\"\000B\003\200\001\001b\006proto3", 895);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lrpc.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Error::default_instance_ = new Error();
  Response::default_instance_ = new Response();
  Response_default_oneof_instance_ = new ResponseOneofInstance();
  RpcMessage::default_instance_ = new RpcMessage();
  RpcMessage_default_oneof_instance_ = new RpcMessageOneofInstance();
  Endpoint::default_instance_ = new Endpoint();
  EndpointList::default_instance_ = new EndpointList();
  KeepaliveInfo::default_instance_ = new KeepaliveInfo();
  ServiceName::default_instance_ = new ServiceName();
  Status::default_instance_ = new Status();
  Request::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  RpcMessage::default_instance_->InitAsDefaultInstance();
  Endpoint::default_instance_->InitAsDefaultInstance();
  EndpointList::default_instance_->InitAsDefaultInstance();
  KeepaliveInfo::default_instance_->InitAsDefaultInstance();
  ServiceName::default_instance_->InitAsDefaultInstance();
  Status::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lrpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lrpc_2eproto {
  StaticDescriptorInitializer_lrpc_2eproto() {
    protobuf_AddDesc_lrpc_2eproto();
  }
} static_descriptor_initializer_lrpc_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kIdFieldNumber;
const int Request::kServiceNameFieldNumber;
const int Request::kMethodNameFieldNumber;
const int Request::kSerializedRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lrpc.Request)
}

void Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lrpc.Request)
}

void Request::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:lrpc.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_request_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lrpc_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:lrpc.Request)
  id_ = 0;
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lrpc.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_service_name;
        break;
      }

      // optional string service_name = 2;
      case 2: {
        if (tag == 18) {
         parse_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lrpc.Request.service_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_method_name;
        break;
      }

      // optional string method_name = 3;
      case 3: {
        if (tag == 26) {
         parse_method_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lrpc.Request.method_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_serialized_request;
        break;
      }

      // optional bytes serialized_request = 4;
      case 4: {
        if (tag == 34) {
         parse_serialized_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lrpc.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lrpc.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lrpc.Request)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string service_name = 2;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lrpc.Request.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service_name(), output);
  }

  // optional string method_name = 3;
  if (this->method_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lrpc.Request.method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->method_name(), output);
  }

  // optional bytes serialized_request = 4;
  if (this->serialized_request().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->serialized_request(), output);
  }

  // @@protoc_insertion_point(serialize_end:lrpc.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lrpc.Request)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string service_name = 2;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lrpc.Request.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_name(), target);
  }

  // optional string method_name = 3;
  if (this->method_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lrpc.Request.method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->method_name(), target);
  }

  // optional bytes serialized_request = 4;
  if (this->serialized_request().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->serialized_request(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lrpc.Request)
  return target;
}

int Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lrpc.Request)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string service_name = 2;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // optional string method_name = 3;
  if (this->method_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method_name());
  }

  // optional bytes serialized_request = 4;
  if (this->serialized_request().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->serialized_request());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lrpc.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lrpc.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lrpc.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lrpc.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.method_name().size() > 0) {

    method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  if (from.serialized_request().size() > 0) {

    serialized_request_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_request_);
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lrpc.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lrpc.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(id_, other->id_);
  service_name_.Swap(&other->service_name_);
  method_name_.Swap(&other->method_name_);
  serialized_request_.Swap(&other->serialized_request_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional int32 id = 1;
void Request::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Request::id() const {
  // @@protoc_insertion_point(field_get:lrpc.Request.id)
  return id_;
}
 void Request::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:lrpc.Request.id)
}

// optional string service_name = 2;
void Request::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request::service_name() const {
  // @@protoc_insertion_point(field_get:lrpc.Request.service_name)
  return service_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lrpc.Request.service_name)
}
 void Request::set_service_name(const char* value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lrpc.Request.service_name)
}
 void Request::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lrpc.Request.service_name)
}
 ::std::string* Request::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:lrpc.Request.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_service_name() {
  // @@protoc_insertion_point(field_release:lrpc.Request.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:lrpc.Request.service_name)
}

// optional string method_name = 3;
void Request::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request::method_name() const {
  // @@protoc_insertion_point(field_get:lrpc.Request.method_name)
  return method_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_method_name(const ::std::string& value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lrpc.Request.method_name)
}
 void Request::set_method_name(const char* value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lrpc.Request.method_name)
}
 void Request::set_method_name(const char* value, size_t size) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lrpc.Request.method_name)
}
 ::std::string* Request::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:lrpc.Request.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_method_name() {
  // @@protoc_insertion_point(field_release:lrpc.Request.method_name)
  
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:lrpc.Request.method_name)
}

// optional bytes serialized_request = 4;
void Request::clear_serialized_request() {
  serialized_request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request::serialized_request() const {
  // @@protoc_insertion_point(field_get:lrpc.Request.serialized_request)
  return serialized_request_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_serialized_request(const ::std::string& value) {
  
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lrpc.Request.serialized_request)
}
 void Request::set_serialized_request(const char* value) {
  
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lrpc.Request.serialized_request)
}
 void Request::set_serialized_request(const void* value, size_t size) {
  
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lrpc.Request.serialized_request)
}
 ::std::string* Request::mutable_serialized_request() {
  
  // @@protoc_insertion_point(field_mutable:lrpc.Request.serialized_request)
  return serialized_request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_serialized_request() {
  // @@protoc_insertion_point(field_release:lrpc.Request.serialized_request)
  
  return serialized_request_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_serialized_request(::std::string* serialized_request) {
  if (serialized_request != NULL) {
    
  } else {
    
  }
  serialized_request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized_request);
  // @@protoc_insertion_point(field_set_allocated:lrpc.Request.serialized_request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kErrnumFieldNumber;
const int Error::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lrpc.Error)
}

void Error::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Error::Error(const Error& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lrpc.Error)
}

void Error::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errnum_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:lrpc.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lrpc_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:lrpc.Error)
  errnum_ = 0;
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lrpc.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 errnum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lrpc.Error.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lrpc.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lrpc.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lrpc.Error)
  // optional int32 errnum = 1;
  if (this->errnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errnum(), output);
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lrpc.Error.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:lrpc.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lrpc.Error)
  // optional int32 errnum = 1;
  if (this->errnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errnum(), target);
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lrpc.Error.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lrpc.Error)
  return target;
}

int Error::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lrpc.Error)
  int total_size = 0;

  // optional int32 errnum = 1;
  if (this->errnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errnum());
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lrpc.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Error* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lrpc.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lrpc.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lrpc.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.errnum() != 0) {
    set_errnum(from.errnum());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lrpc.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lrpc.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  std::swap(errnum_, other->errnum_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// optional int32 errnum = 1;
void Error::clear_errnum() {
  errnum_ = 0;
}
 ::google::protobuf::int32 Error::errnum() const {
  // @@protoc_insertion_point(field_get:lrpc.Error.errnum)
  return errnum_;
}
 void Error::set_errnum(::google::protobuf::int32 value) {
  
  errnum_ = value;
  // @@protoc_insertion_point(field_set:lrpc.Error.errnum)
}

// optional string msg = 2;
void Error::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Error::msg() const {
  // @@protoc_insertion_point(field_get:lrpc.Error.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Error::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lrpc.Error.msg)
}
 void Error::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lrpc.Error.msg)
}
 void Error::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lrpc.Error.msg)
}
 ::std::string* Error::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:lrpc.Error.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Error::release_msg() {
  // @@protoc_insertion_point(field_release:lrpc.Error.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Error::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:lrpc.Error.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kIdFieldNumber;
const int Response::kSerializedResponseFieldNumber;
const int Response::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lrpc.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Response_default_oneof_instance_->serialized_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  Response_default_oneof_instance_->error_ = const_cast< ::lrpc::Error*>(&::lrpc::Error::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lrpc.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  clear_has_Body();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:lrpc.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (has_Body()) {
    clear_Body();
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lrpc_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::clear_Body() {
// @@protoc_insertion_point(one_of_clear_start:lrpc.Response)
  switch(Body_case()) {
    case kSerializedResponse: {
      Body_.serialized_response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kError: {
      delete Body_.error_;
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:lrpc.Response)
  id_ = 0;
  clear_Body();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lrpc.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_serialized_response;
        break;
      }

      // optional bytes serialized_response = 2;
      case 2: {
        if (tag == 18) {
         parse_serialized_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .lrpc.Error error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lrpc.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lrpc.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lrpc.Response)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes serialized_response = 2;
  if (has_serialized_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->serialized_response(), output);
  }

  // optional .lrpc.Error error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *Body_.error_, output);
  }

  // @@protoc_insertion_point(serialize_end:lrpc.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lrpc.Response)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bytes serialized_response = 2;
  if (has_serialized_response()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->serialized_response(), target);
  }

  // optional .lrpc.Error error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *Body_.error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lrpc.Response)
  return target;
}

int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lrpc.Response)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  switch (Body_case()) {
    // optional bytes serialized_response = 2;
    case kSerializedResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_response());
      break;
    }
    // optional .lrpc.Error error = 3;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Body_.error_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lrpc.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lrpc.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lrpc.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lrpc.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.Body_case()) {
    case kSerializedResponse: {
      set_serialized_response(from.serialized_response());
      break;
    }
    case kError: {
      mutable_error()->::lrpc::Error::MergeFrom(from.error());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lrpc.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lrpc.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(id_, other->id_);
  std::swap(Body_, other->Body_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional int32 id = 1;
void Response::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Response::id() const {
  // @@protoc_insertion_point(field_get:lrpc.Response.id)
  return id_;
}
 void Response::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:lrpc.Response.id)
}

// optional bytes serialized_response = 2;
bool Response::has_serialized_response() const {
  return Body_case() == kSerializedResponse;
}
void Response::set_has_serialized_response() {
  _oneof_case_[0] = kSerializedResponse;
}
void Response::clear_serialized_response() {
  if (has_serialized_response()) {
    Body_.serialized_response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Body();
  }
}
 const ::std::string& Response::serialized_response() const {
  // @@protoc_insertion_point(field_get:lrpc.Response.serialized_response)
  if (has_serialized_response()) {
    return Body_.serialized_response_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Response::set_serialized_response(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lrpc.Response.serialized_response)
  if (!has_serialized_response()) {
    clear_Body();
    set_has_serialized_response();
    Body_.serialized_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Body_.serialized_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lrpc.Response.serialized_response)
}
 void Response::set_serialized_response(const char* value) {
  if (!has_serialized_response()) {
    clear_Body();
    set_has_serialized_response();
    Body_.serialized_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Body_.serialized_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lrpc.Response.serialized_response)
}
 void Response::set_serialized_response(const void* value, size_t size) {
  if (!has_serialized_response()) {
    clear_Body();
    set_has_serialized_response();
    Body_.serialized_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Body_.serialized_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lrpc.Response.serialized_response)
}
 ::std::string* Response::mutable_serialized_response() {
  if (!has_serialized_response()) {
    clear_Body();
    set_has_serialized_response();
    Body_.serialized_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:lrpc.Response.serialized_response)
  return Body_.serialized_response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response::release_serialized_response() {
  // @@protoc_insertion_point(field_release:lrpc.Response.serialized_response)
  if (has_serialized_response()) {
    clear_has_Body();
    return Body_.serialized_response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Response::set_allocated_serialized_response(::std::string* serialized_response) {
  if (!has_serialized_response()) {
    Body_.serialized_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Body();
  if (serialized_response != NULL) {
    set_has_serialized_response();
    Body_.serialized_response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        serialized_response);
  }
  // @@protoc_insertion_point(field_set_allocated:lrpc.Response.serialized_response)
}

// optional .lrpc.Error error = 3;
bool Response::has_error() const {
  return Body_case() == kError;
}
void Response::set_has_error() {
  _oneof_case_[0] = kError;
}
void Response::clear_error() {
  if (has_error()) {
    delete Body_.error_;
    clear_has_Body();
  }
}
 const ::lrpc::Error& Response::error() const {
  // @@protoc_insertion_point(field_get:lrpc.Response.error)
  return has_error()
      ? *Body_.error_
      : ::lrpc::Error::default_instance();
}
::lrpc::Error* Response::mutable_error() {
  if (!has_error()) {
    clear_Body();
    set_has_error();
    Body_.error_ = new ::lrpc::Error;
  }
  // @@protoc_insertion_point(field_mutable:lrpc.Response.error)
  return Body_.error_;
}
::lrpc::Error* Response::release_error() {
  // @@protoc_insertion_point(field_release:lrpc.Response.error)
  if (has_error()) {
    clear_has_Body();
    ::lrpc::Error* temp = Body_.error_;
    Body_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_error(::lrpc::Error* error) {
  clear_Body();
  if (error) {
    set_has_error();
    Body_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:lrpc.Response.error)
}

bool Response::has_Body() const {
  return Body_case() != BODY_NOT_SET;
}
void Response::clear_has_Body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
Response::BodyCase Response::Body_case() const {
  return Response::BodyCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcMessage::kRequestFieldNumber;
const int RpcMessage::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcMessage::RpcMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lrpc.RpcMessage)
}

void RpcMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  RpcMessage_default_oneof_instance_->request_ = const_cast< ::lrpc::Request*>(&::lrpc::Request::default_instance());
  RpcMessage_default_oneof_instance_->response_ = const_cast< ::lrpc::Response*>(&::lrpc::Response::default_instance());
}

RpcMessage::RpcMessage(const RpcMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lrpc.RpcMessage)
}

void RpcMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_Body();
}

RpcMessage::~RpcMessage() {
  // @@protoc_insertion_point(destructor:lrpc.RpcMessage)
  SharedDtor();
}

void RpcMessage::SharedDtor() {
  if (has_Body()) {
    clear_Body();
  }
  if (this != default_instance_) {
  }
}

void RpcMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcMessage_descriptor_;
}

const RpcMessage& RpcMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lrpc_2eproto();
  return *default_instance_;
}

RpcMessage* RpcMessage::default_instance_ = NULL;

RpcMessage* RpcMessage::New(::google::protobuf::Arena* arena) const {
  RpcMessage* n = new RpcMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcMessage::clear_Body() {
// @@protoc_insertion_point(one_of_clear_start:lrpc.RpcMessage)
  switch(Body_case()) {
    case kRequest: {
      delete Body_.request_;
      break;
    }
    case kResponse: {
      delete Body_.response_;
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void RpcMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:lrpc.RpcMessage)
  clear_Body();
}

bool RpcMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lrpc.RpcMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lrpc.Request request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .lrpc.Response response = 2;
      case 2: {
        if (tag == 18) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lrpc.RpcMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lrpc.RpcMessage)
  return false;
#undef DO_
}

void RpcMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lrpc.RpcMessage)
  // optional .lrpc.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *Body_.request_, output);
  }

  // optional .lrpc.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *Body_.response_, output);
  }

  // @@protoc_insertion_point(serialize_end:lrpc.RpcMessage)
}

::google::protobuf::uint8* RpcMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lrpc.RpcMessage)
  // optional .lrpc.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *Body_.request_, false, target);
  }

  // optional .lrpc.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *Body_.response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lrpc.RpcMessage)
  return target;
}

int RpcMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lrpc.RpcMessage)
  int total_size = 0;

  switch (Body_case()) {
    // optional .lrpc.Request request = 1;
    case kRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Body_.request_);
      break;
    }
    // optional .lrpc.Response response = 2;
    case kResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Body_.response_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lrpc.RpcMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RpcMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lrpc.RpcMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lrpc.RpcMessage)
    MergeFrom(*source);
  }
}

void RpcMessage::MergeFrom(const RpcMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lrpc.RpcMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.Body_case()) {
    case kRequest: {
      mutable_request()->::lrpc::Request::MergeFrom(from.request());
      break;
    }
    case kResponse: {
      mutable_response()->::lrpc::Response::MergeFrom(from.response());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
}

void RpcMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lrpc.RpcMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMessage::CopyFrom(const RpcMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lrpc.RpcMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMessage::IsInitialized() const {

  return true;
}

void RpcMessage::Swap(RpcMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcMessage::InternalSwap(RpcMessage* other) {
  std::swap(Body_, other->Body_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcMessage_descriptor_;
  metadata.reflection = RpcMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcMessage

// optional .lrpc.Request request = 1;
bool RpcMessage::has_request() const {
  return Body_case() == kRequest;
}
void RpcMessage::set_has_request() {
  _oneof_case_[0] = kRequest;
}
void RpcMessage::clear_request() {
  if (has_request()) {
    delete Body_.request_;
    clear_has_Body();
  }
}
 const ::lrpc::Request& RpcMessage::request() const {
  // @@protoc_insertion_point(field_get:lrpc.RpcMessage.request)
  return has_request()
      ? *Body_.request_
      : ::lrpc::Request::default_instance();
}
::lrpc::Request* RpcMessage::mutable_request() {
  if (!has_request()) {
    clear_Body();
    set_has_request();
    Body_.request_ = new ::lrpc::Request;
  }
  // @@protoc_insertion_point(field_mutable:lrpc.RpcMessage.request)
  return Body_.request_;
}
::lrpc::Request* RpcMessage::release_request() {
  // @@protoc_insertion_point(field_release:lrpc.RpcMessage.request)
  if (has_request()) {
    clear_has_Body();
    ::lrpc::Request* temp = Body_.request_;
    Body_.request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RpcMessage::set_allocated_request(::lrpc::Request* request) {
  clear_Body();
  if (request) {
    set_has_request();
    Body_.request_ = request;
  }
  // @@protoc_insertion_point(field_set_allocated:lrpc.RpcMessage.request)
}

// optional .lrpc.Response response = 2;
bool RpcMessage::has_response() const {
  return Body_case() == kResponse;
}
void RpcMessage::set_has_response() {
  _oneof_case_[0] = kResponse;
}
void RpcMessage::clear_response() {
  if (has_response()) {
    delete Body_.response_;
    clear_has_Body();
  }
}
 const ::lrpc::Response& RpcMessage::response() const {
  // @@protoc_insertion_point(field_get:lrpc.RpcMessage.response)
  return has_response()
      ? *Body_.response_
      : ::lrpc::Response::default_instance();
}
::lrpc::Response* RpcMessage::mutable_response() {
  if (!has_response()) {
    clear_Body();
    set_has_response();
    Body_.response_ = new ::lrpc::Response;
  }
  // @@protoc_insertion_point(field_mutable:lrpc.RpcMessage.response)
  return Body_.response_;
}
::lrpc::Response* RpcMessage::release_response() {
  // @@protoc_insertion_point(field_release:lrpc.RpcMessage.response)
  if (has_response()) {
    clear_has_Body();
    ::lrpc::Response* temp = Body_.response_;
    Body_.response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RpcMessage::set_allocated_response(::lrpc::Response* response) {
  clear_Body();
  if (response) {
    set_has_response();
    Body_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:lrpc.RpcMessage.response)
}

bool RpcMessage::has_Body() const {
  return Body_case() != BODY_NOT_SET;
}
void RpcMessage::clear_has_Body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
RpcMessage::BodyCase RpcMessage::Body_case() const {
  return RpcMessage::BodyCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Endpoint::kIpFieldNumber;
const int Endpoint::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Endpoint::Endpoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lrpc.Endpoint)
}

void Endpoint::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Endpoint::Endpoint(const Endpoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lrpc.Endpoint)
}

void Endpoint::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

Endpoint::~Endpoint() {
  // @@protoc_insertion_point(destructor:lrpc.Endpoint)
  SharedDtor();
}

void Endpoint::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Endpoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Endpoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Endpoint_descriptor_;
}

const Endpoint& Endpoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lrpc_2eproto();
  return *default_instance_;
}

Endpoint* Endpoint::default_instance_ = NULL;

Endpoint* Endpoint::New(::google::protobuf::Arena* arena) const {
  Endpoint* n = new Endpoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Endpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:lrpc.Endpoint)
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

bool Endpoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lrpc.Endpoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lrpc.Endpoint.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lrpc.Endpoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lrpc.Endpoint)
  return false;
#undef DO_
}

void Endpoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lrpc.Endpoint)
  // optional string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lrpc.Endpoint.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:lrpc.Endpoint)
}

::google::protobuf::uint8* Endpoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lrpc.Endpoint)
  // optional string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lrpc.Endpoint.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lrpc.Endpoint)
  return target;
}

int Endpoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lrpc.Endpoint)
  int total_size = 0;

  // optional string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Endpoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lrpc.Endpoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Endpoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Endpoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lrpc.Endpoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lrpc.Endpoint)
    MergeFrom(*source);
  }
}

void Endpoint::MergeFrom(const Endpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lrpc.Endpoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void Endpoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lrpc.Endpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Endpoint::CopyFrom(const Endpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lrpc.Endpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Endpoint::IsInitialized() const {

  return true;
}

void Endpoint::Swap(Endpoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Endpoint::InternalSwap(Endpoint* other) {
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Endpoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Endpoint_descriptor_;
  metadata.reflection = Endpoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Endpoint

// optional string ip = 1;
void Endpoint::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Endpoint::ip() const {
  // @@protoc_insertion_point(field_get:lrpc.Endpoint.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Endpoint::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lrpc.Endpoint.ip)
}
 void Endpoint::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lrpc.Endpoint.ip)
}
 void Endpoint::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lrpc.Endpoint.ip)
}
 ::std::string* Endpoint::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:lrpc.Endpoint.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Endpoint::release_ip() {
  // @@protoc_insertion_point(field_release:lrpc.Endpoint.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Endpoint::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:lrpc.Endpoint.ip)
}

// optional int32 port = 2;
void Endpoint::clear_port() {
  port_ = 0;
}
 ::google::protobuf::int32 Endpoint::port() const {
  // @@protoc_insertion_point(field_get:lrpc.Endpoint.port)
  return port_;
}
 void Endpoint::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:lrpc.Endpoint.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndpointList::kEndpointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndpointList::EndpointList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lrpc.EndpointList)
}

void EndpointList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EndpointList::EndpointList(const EndpointList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lrpc.EndpointList)
}

void EndpointList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

EndpointList::~EndpointList() {
  // @@protoc_insertion_point(destructor:lrpc.EndpointList)
  SharedDtor();
}

void EndpointList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EndpointList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndpointList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndpointList_descriptor_;
}

const EndpointList& EndpointList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lrpc_2eproto();
  return *default_instance_;
}

EndpointList* EndpointList::default_instance_ = NULL;

EndpointList* EndpointList::New(::google::protobuf::Arena* arena) const {
  EndpointList* n = new EndpointList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EndpointList::Clear() {
// @@protoc_insertion_point(message_clear_start:lrpc.EndpointList)
  endpoints_.Clear();
}

bool EndpointList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lrpc.EndpointList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lrpc.Endpoint endpoints = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_endpoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_endpoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_endpoints;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lrpc.EndpointList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lrpc.EndpointList)
  return false;
#undef DO_
}

void EndpointList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lrpc.EndpointList)
  // repeated .lrpc.Endpoint endpoints = 1;
  for (unsigned int i = 0, n = this->endpoints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->endpoints(i), output);
  }

  // @@protoc_insertion_point(serialize_end:lrpc.EndpointList)
}

::google::protobuf::uint8* EndpointList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lrpc.EndpointList)
  // repeated .lrpc.Endpoint endpoints = 1;
  for (unsigned int i = 0, n = this->endpoints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->endpoints(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lrpc.EndpointList)
  return target;
}

int EndpointList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lrpc.EndpointList)
  int total_size = 0;

  // repeated .lrpc.Endpoint endpoints = 1;
  total_size += 1 * this->endpoints_size();
  for (int i = 0; i < this->endpoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->endpoints(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndpointList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lrpc.EndpointList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EndpointList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EndpointList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lrpc.EndpointList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lrpc.EndpointList)
    MergeFrom(*source);
  }
}

void EndpointList::MergeFrom(const EndpointList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lrpc.EndpointList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  endpoints_.MergeFrom(from.endpoints_);
}

void EndpointList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lrpc.EndpointList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndpointList::CopyFrom(const EndpointList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lrpc.EndpointList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndpointList::IsInitialized() const {

  return true;
}

void EndpointList::Swap(EndpointList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndpointList::InternalSwap(EndpointList* other) {
  endpoints_.UnsafeArenaSwap(&other->endpoints_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EndpointList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndpointList_descriptor_;
  metadata.reflection = EndpointList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EndpointList

// repeated .lrpc.Endpoint endpoints = 1;
int EndpointList::endpoints_size() const {
  return endpoints_.size();
}
void EndpointList::clear_endpoints() {
  endpoints_.Clear();
}
const ::lrpc::Endpoint& EndpointList::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:lrpc.EndpointList.endpoints)
  return endpoints_.Get(index);
}
::lrpc::Endpoint* EndpointList::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:lrpc.EndpointList.endpoints)
  return endpoints_.Mutable(index);
}
::lrpc::Endpoint* EndpointList::add_endpoints() {
  // @@protoc_insertion_point(field_add:lrpc.EndpointList.endpoints)
  return endpoints_.Add();
}
::google::protobuf::RepeatedPtrField< ::lrpc::Endpoint >*
EndpointList::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:lrpc.EndpointList.endpoints)
  return &endpoints_;
}
const ::google::protobuf::RepeatedPtrField< ::lrpc::Endpoint >&
EndpointList::endpoints() const {
  // @@protoc_insertion_point(field_list:lrpc.EndpointList.endpoints)
  return endpoints_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepaliveInfo::kServiceNameFieldNumber;
const int KeepaliveInfo::kEndpointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepaliveInfo::KeepaliveInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lrpc.KeepaliveInfo)
}

void KeepaliveInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  endpoint_ = const_cast< ::lrpc::Endpoint*>(&::lrpc::Endpoint::default_instance());
}

KeepaliveInfo::KeepaliveInfo(const KeepaliveInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lrpc.KeepaliveInfo)
}

void KeepaliveInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  servicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endpoint_ = NULL;
}

KeepaliveInfo::~KeepaliveInfo() {
  // @@protoc_insertion_point(destructor:lrpc.KeepaliveInfo)
  SharedDtor();
}

void KeepaliveInfo::SharedDtor() {
  servicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete endpoint_;
  }
}

void KeepaliveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepaliveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeepaliveInfo_descriptor_;
}

const KeepaliveInfo& KeepaliveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lrpc_2eproto();
  return *default_instance_;
}

KeepaliveInfo* KeepaliveInfo::default_instance_ = NULL;

KeepaliveInfo* KeepaliveInfo::New(::google::protobuf::Arena* arena) const {
  KeepaliveInfo* n = new KeepaliveInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeepaliveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:lrpc.KeepaliveInfo)
  servicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && endpoint_ != NULL) delete endpoint_;
  endpoint_ = NULL;
}

bool KeepaliveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lrpc.KeepaliveInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serviceName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servicename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servicename().data(), this->servicename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lrpc.KeepaliveInfo.serviceName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_endpoint;
        break;
      }

      // optional .lrpc.Endpoint endpoint = 2;
      case 2: {
        if (tag == 18) {
         parse_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lrpc.KeepaliveInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lrpc.KeepaliveInfo)
  return false;
#undef DO_
}

void KeepaliveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lrpc.KeepaliveInfo)
  // optional string serviceName = 1;
  if (this->servicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servicename().data(), this->servicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lrpc.KeepaliveInfo.serviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->servicename(), output);
  }

  // optional .lrpc.Endpoint endpoint = 2;
  if (this->has_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->endpoint_, output);
  }

  // @@protoc_insertion_point(serialize_end:lrpc.KeepaliveInfo)
}

::google::protobuf::uint8* KeepaliveInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lrpc.KeepaliveInfo)
  // optional string serviceName = 1;
  if (this->servicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servicename().data(), this->servicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lrpc.KeepaliveInfo.serviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servicename(), target);
  }

  // optional .lrpc.Endpoint endpoint = 2;
  if (this->has_endpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->endpoint_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lrpc.KeepaliveInfo)
  return target;
}

int KeepaliveInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lrpc.KeepaliveInfo)
  int total_size = 0;

  // optional string serviceName = 1;
  if (this->servicename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servicename());
  }

  // optional .lrpc.Endpoint endpoint = 2;
  if (this->has_endpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->endpoint_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepaliveInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lrpc.KeepaliveInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KeepaliveInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepaliveInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lrpc.KeepaliveInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lrpc.KeepaliveInfo)
    MergeFrom(*source);
  }
}

void KeepaliveInfo::MergeFrom(const KeepaliveInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lrpc.KeepaliveInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.servicename().size() > 0) {

    servicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servicename_);
  }
  if (from.has_endpoint()) {
    mutable_endpoint()->::lrpc::Endpoint::MergeFrom(from.endpoint());
  }
}

void KeepaliveInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lrpc.KeepaliveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepaliveInfo::CopyFrom(const KeepaliveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lrpc.KeepaliveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepaliveInfo::IsInitialized() const {

  return true;
}

void KeepaliveInfo::Swap(KeepaliveInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepaliveInfo::InternalSwap(KeepaliveInfo* other) {
  servicename_.Swap(&other->servicename_);
  std::swap(endpoint_, other->endpoint_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeepaliveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeepaliveInfo_descriptor_;
  metadata.reflection = KeepaliveInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeepaliveInfo

// optional string serviceName = 1;
void KeepaliveInfo::clear_servicename() {
  servicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KeepaliveInfo::servicename() const {
  // @@protoc_insertion_point(field_get:lrpc.KeepaliveInfo.serviceName)
  return servicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeepaliveInfo::set_servicename(const ::std::string& value) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lrpc.KeepaliveInfo.serviceName)
}
 void KeepaliveInfo::set_servicename(const char* value) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lrpc.KeepaliveInfo.serviceName)
}
 void KeepaliveInfo::set_servicename(const char* value, size_t size) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lrpc.KeepaliveInfo.serviceName)
}
 ::std::string* KeepaliveInfo::mutable_servicename() {
  
  // @@protoc_insertion_point(field_mutable:lrpc.KeepaliveInfo.serviceName)
  return servicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeepaliveInfo::release_servicename() {
  // @@protoc_insertion_point(field_release:lrpc.KeepaliveInfo.serviceName)
  
  return servicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeepaliveInfo::set_allocated_servicename(::std::string* servicename) {
  if (servicename != NULL) {
    
  } else {
    
  }
  servicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servicename);
  // @@protoc_insertion_point(field_set_allocated:lrpc.KeepaliveInfo.serviceName)
}

// optional .lrpc.Endpoint endpoint = 2;
bool KeepaliveInfo::has_endpoint() const {
  return !_is_default_instance_ && endpoint_ != NULL;
}
void KeepaliveInfo::clear_endpoint() {
  if (GetArenaNoVirtual() == NULL && endpoint_ != NULL) delete endpoint_;
  endpoint_ = NULL;
}
const ::lrpc::Endpoint& KeepaliveInfo::endpoint() const {
  // @@protoc_insertion_point(field_get:lrpc.KeepaliveInfo.endpoint)
  return endpoint_ != NULL ? *endpoint_ : *default_instance_->endpoint_;
}
::lrpc::Endpoint* KeepaliveInfo::mutable_endpoint() {
  
  if (endpoint_ == NULL) {
    endpoint_ = new ::lrpc::Endpoint;
  }
  // @@protoc_insertion_point(field_mutable:lrpc.KeepaliveInfo.endpoint)
  return endpoint_;
}
::lrpc::Endpoint* KeepaliveInfo::release_endpoint() {
  // @@protoc_insertion_point(field_release:lrpc.KeepaliveInfo.endpoint)
  
  ::lrpc::Endpoint* temp = endpoint_;
  endpoint_ = NULL;
  return temp;
}
void KeepaliveInfo::set_allocated_endpoint(::lrpc::Endpoint* endpoint) {
  delete endpoint_;
  endpoint_ = endpoint;
  if (endpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lrpc.KeepaliveInfo.endpoint)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceName::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceName::ServiceName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lrpc.ServiceName)
}

void ServiceName::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ServiceName::ServiceName(const ServiceName& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lrpc.ServiceName)
}

void ServiceName::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ServiceName::~ServiceName() {
  // @@protoc_insertion_point(destructor:lrpc.ServiceName)
  SharedDtor();
}

void ServiceName::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ServiceName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceName_descriptor_;
}

const ServiceName& ServiceName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lrpc_2eproto();
  return *default_instance_;
}

ServiceName* ServiceName::default_instance_ = NULL;

ServiceName* ServiceName::New(::google::protobuf::Arena* arena) const {
  ServiceName* n = new ServiceName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceName::Clear() {
// @@protoc_insertion_point(message_clear_start:lrpc.ServiceName)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServiceName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lrpc.ServiceName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lrpc.ServiceName.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lrpc.ServiceName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lrpc.ServiceName)
  return false;
#undef DO_
}

void ServiceName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lrpc.ServiceName)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lrpc.ServiceName.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:lrpc.ServiceName)
}

::google::protobuf::uint8* ServiceName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lrpc.ServiceName)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lrpc.ServiceName.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lrpc.ServiceName)
  return target;
}

int ServiceName::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lrpc.ServiceName)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lrpc.ServiceName)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServiceName* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lrpc.ServiceName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lrpc.ServiceName)
    MergeFrom(*source);
  }
}

void ServiceName::MergeFrom(const ServiceName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lrpc.ServiceName)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ServiceName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lrpc.ServiceName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceName::CopyFrom(const ServiceName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lrpc.ServiceName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceName::IsInitialized() const {

  return true;
}

void ServiceName::Swap(ServiceName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceName::InternalSwap(ServiceName* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceName_descriptor_;
  metadata.reflection = ServiceName_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceName

// optional string name = 1;
void ServiceName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ServiceName::name() const {
  // @@protoc_insertion_point(field_get:lrpc.ServiceName.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServiceName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lrpc.ServiceName.name)
}
 void ServiceName::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lrpc.ServiceName.name)
}
 void ServiceName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lrpc.ServiceName.name)
}
 ::std::string* ServiceName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lrpc.ServiceName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServiceName::release_name() {
  // @@protoc_insertion_point(field_release:lrpc.ServiceName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServiceName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lrpc.ServiceName.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lrpc.Status)
}

void Status::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Status::Status(const Status& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lrpc.Status)
}

void Status::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_ = 0;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:lrpc.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lrpc_2eproto();
  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:lrpc.Status)
  result_ = 0;
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lrpc.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lrpc.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lrpc.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lrpc.Status)
  // optional int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:lrpc.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lrpc.Status)
  // optional int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lrpc.Status)
  return target;
}

int Status::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lrpc.Status)
  int total_size = 0;

  // optional int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lrpc.Status)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Status* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lrpc.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lrpc.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lrpc.Status)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lrpc.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lrpc.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {

  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// optional int32 result = 1;
void Status::clear_result() {
  result_ = 0;
}
 ::google::protobuf::int32 Status::result() const {
  // @@protoc_insertion_point(field_get:lrpc.Status.result)
  return result_;
}
 void Status::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:lrpc.Status.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

NameService::~NameService() {}

const ::google::protobuf::ServiceDescriptor* NameService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* NameService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameService_descriptor_;
}

void NameService::GetEndpoints(::google::protobuf::RpcController* controller,
                         const ::lrpc::ServiceName*,
                         ::lrpc::EndpointList*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetEndpoints() not implemented.");
  done->Run();
}

void NameService::Keepalive(::google::protobuf::RpcController* controller,
                         const ::lrpc::KeepaliveInfo*,
                         ::lrpc::Status*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Keepalive() not implemented.");
  done->Run();
}

void NameService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), NameService_descriptor_);
  switch(method->index()) {
    case 0:
      GetEndpoints(controller,
             ::google::protobuf::down_cast<const ::lrpc::ServiceName*>(request),
             ::google::protobuf::down_cast< ::lrpc::EndpointList*>(response),
             done);
      break;
    case 1:
      Keepalive(controller,
             ::google::protobuf::down_cast<const ::lrpc::KeepaliveInfo*>(request),
             ::google::protobuf::down_cast< ::lrpc::Status*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& NameService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::lrpc::ServiceName::default_instance();
    case 1:
      return ::lrpc::KeepaliveInfo::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& NameService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::lrpc::EndpointList::default_instance();
    case 1:
      return ::lrpc::Status::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

NameService_Stub::NameService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
NameService_Stub::NameService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
NameService_Stub::~NameService_Stub() {
  if (owns_channel_) delete channel_;
}

void NameService_Stub::GetEndpoints(::google::protobuf::RpcController* controller,
                              const ::lrpc::ServiceName* request,
                              ::lrpc::EndpointList* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void NameService_Stub::Keepalive(::google::protobuf::RpcController* controller,
                              const ::lrpc::KeepaliveInfo* request,
                              ::lrpc::Status* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace lrpc

// @@protoc_insertion_point(global_scope)
