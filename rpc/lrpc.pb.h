// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lrpc.proto

#ifndef PROTOBUF_lrpc_2eproto__INCLUDED
#define PROTOBUF_lrpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace lrpc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_lrpc_2eproto();
void protobuf_AssignDesc_lrpc_2eproto();
void protobuf_ShutdownFile_lrpc_2eproto();

class Endpoint;
class EndpointList;
class Error;
class KeepaliveInfo;
class Request;
class Response;
class RpcMessage;
class ServiceName;
class Status;

enum MessageType {
  HEARTBEAT_PACKET = 0,
  RPC_SERVICE_REGISTER = 1,
  RPC_SERVICE_REGISTER_RESPONSE = 2,
  RPC_SERVICE_DISCOVER = 3,
  RPC_SERVICE_DISCOVER_RESPONSE = 4,
  RPC_METHOD_REQUEST = 5,
  RPC_METHOD_RESPONSE = 6,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = HEARTBEAT_PACKET;
const MessageType MessageType_MAX = RPC_METHOD_RESPONSE;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lrpc.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string service_name = 2;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 2;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // optional string method_name = 3;
  void clear_method_name();
  static const int kMethodNameFieldNumber = 3;
  const ::std::string& method_name() const;
  void set_method_name(const ::std::string& value);
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  ::std::string* mutable_method_name();
  ::std::string* release_method_name();
  void set_allocated_method_name(::std::string* method_name);

  // optional bytes serialized_request = 4;
  void clear_serialized_request();
  static const int kSerializedRequestFieldNumber = 4;
  const ::std::string& serialized_request() const;
  void set_serialized_request(const ::std::string& value);
  void set_serialized_request(const char* value);
  void set_serialized_request(const void* value, size_t size);
  ::std::string* mutable_serialized_request();
  ::std::string* release_serialized_request();
  void set_allocated_serialized_request(::std::string* serialized_request);

  // @@protoc_insertion_point(class_scope:lrpc.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr method_name_;
  ::google::protobuf::internal::ArenaStringPtr serialized_request_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lrpc_2eproto();
  friend void protobuf_AssignDesc_lrpc_2eproto();
  friend void protobuf_ShutdownFile_lrpc_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lrpc.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  void Swap(Error* other);

  // implements Message ----------------------------------------------

  inline Error* New() const { return New(NULL); }

  Error* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 errnum = 1;
  void clear_errnum();
  static const int kErrnumFieldNumber = 1;
  ::google::protobuf::int32 errnum() const;
  void set_errnum(::google::protobuf::int32 value);

  // optional string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:lrpc.Error)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 errnum_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lrpc_2eproto();
  friend void protobuf_AssignDesc_lrpc_2eproto();
  friend void protobuf_ShutdownFile_lrpc_2eproto();

  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lrpc.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  enum BodyCase {
    kSerializedResponse = 2,
    kError = 3,
    BODY_NOT_SET = 0,
  };

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional bytes serialized_response = 2;
  private:
  bool has_serialized_response() const;
  public:
  void clear_serialized_response();
  static const int kSerializedResponseFieldNumber = 2;
  const ::std::string& serialized_response() const;
  void set_serialized_response(const ::std::string& value);
  void set_serialized_response(const char* value);
  void set_serialized_response(const void* value, size_t size);
  ::std::string* mutable_serialized_response();
  ::std::string* release_serialized_response();
  void set_allocated_serialized_response(::std::string* serialized_response);

  // optional .lrpc.Error error = 3;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  const ::lrpc::Error& error() const;
  ::lrpc::Error* mutable_error();
  ::lrpc::Error* release_error();
  void set_allocated_error(::lrpc::Error* error);

  BodyCase Body_case() const;
  // @@protoc_insertion_point(class_scope:lrpc.Response)
 private:
  inline void set_has_serialized_response();
  inline void set_has_error();

  inline bool has_Body() const;
  void clear_Body();
  inline void clear_has_Body();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 id_;
  union BodyUnion {
    BodyUnion() {}
    ::google::protobuf::internal::ArenaStringPtr serialized_response_;
    ::lrpc::Error* error_;
  } Body_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_lrpc_2eproto();
  friend void protobuf_AssignDesc_lrpc_2eproto();
  friend void protobuf_ShutdownFile_lrpc_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class RpcMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lrpc.RpcMessage) */ {
 public:
  RpcMessage();
  virtual ~RpcMessage();

  RpcMessage(const RpcMessage& from);

  inline RpcMessage& operator=(const RpcMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMessage& default_instance();

  enum BodyCase {
    kRequest = 1,
    kResponse = 2,
    BODY_NOT_SET = 0,
  };

  void Swap(RpcMessage* other);

  // implements Message ----------------------------------------------

  inline RpcMessage* New() const { return New(NULL); }

  RpcMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMessage& from);
  void MergeFrom(const RpcMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RpcMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .lrpc.Request request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  const ::lrpc::Request& request() const;
  ::lrpc::Request* mutable_request();
  ::lrpc::Request* release_request();
  void set_allocated_request(::lrpc::Request* request);

  // optional .lrpc.Response response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  const ::lrpc::Response& response() const;
  ::lrpc::Response* mutable_response();
  ::lrpc::Response* release_response();
  void set_allocated_response(::lrpc::Response* response);

  BodyCase Body_case() const;
  // @@protoc_insertion_point(class_scope:lrpc.RpcMessage)
 private:
  inline void set_has_request();
  inline void set_has_response();

  inline bool has_Body() const;
  void clear_Body();
  inline void clear_has_Body();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union BodyUnion {
    BodyUnion() {}
    ::lrpc::Request* request_;
    ::lrpc::Response* response_;
  } Body_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_lrpc_2eproto();
  friend void protobuf_AssignDesc_lrpc_2eproto();
  friend void protobuf_ShutdownFile_lrpc_2eproto();

  void InitAsDefaultInstance();
  static RpcMessage* default_instance_;
};
// -------------------------------------------------------------------

class Endpoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lrpc.Endpoint) */ {
 public:
  Endpoint();
  virtual ~Endpoint();

  Endpoint(const Endpoint& from);

  inline Endpoint& operator=(const Endpoint& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Endpoint& default_instance();

  void Swap(Endpoint* other);

  // implements Message ----------------------------------------------

  inline Endpoint* New() const { return New(NULL); }

  Endpoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Endpoint& from);
  void MergeFrom(const Endpoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Endpoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional int32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lrpc.Endpoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 port_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lrpc_2eproto();
  friend void protobuf_AssignDesc_lrpc_2eproto();
  friend void protobuf_ShutdownFile_lrpc_2eproto();

  void InitAsDefaultInstance();
  static Endpoint* default_instance_;
};
// -------------------------------------------------------------------

class EndpointList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lrpc.EndpointList) */ {
 public:
  EndpointList();
  virtual ~EndpointList();

  EndpointList(const EndpointList& from);

  inline EndpointList& operator=(const EndpointList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EndpointList& default_instance();

  void Swap(EndpointList* other);

  // implements Message ----------------------------------------------

  inline EndpointList* New() const { return New(NULL); }

  EndpointList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EndpointList& from);
  void MergeFrom(const EndpointList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EndpointList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .lrpc.Endpoint endpoints = 1;
  int endpoints_size() const;
  void clear_endpoints();
  static const int kEndpointsFieldNumber = 1;
  const ::lrpc::Endpoint& endpoints(int index) const;
  ::lrpc::Endpoint* mutable_endpoints(int index);
  ::lrpc::Endpoint* add_endpoints();
  ::google::protobuf::RepeatedPtrField< ::lrpc::Endpoint >*
      mutable_endpoints();
  const ::google::protobuf::RepeatedPtrField< ::lrpc::Endpoint >&
      endpoints() const;

  // @@protoc_insertion_point(class_scope:lrpc.EndpointList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::lrpc::Endpoint > endpoints_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lrpc_2eproto();
  friend void protobuf_AssignDesc_lrpc_2eproto();
  friend void protobuf_ShutdownFile_lrpc_2eproto();

  void InitAsDefaultInstance();
  static EndpointList* default_instance_;
};
// -------------------------------------------------------------------

class KeepaliveInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lrpc.KeepaliveInfo) */ {
 public:
  KeepaliveInfo();
  virtual ~KeepaliveInfo();

  KeepaliveInfo(const KeepaliveInfo& from);

  inline KeepaliveInfo& operator=(const KeepaliveInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepaliveInfo& default_instance();

  void Swap(KeepaliveInfo* other);

  // implements Message ----------------------------------------------

  inline KeepaliveInfo* New() const { return New(NULL); }

  KeepaliveInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeepaliveInfo& from);
  void MergeFrom(const KeepaliveInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeepaliveInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serviceName = 1;
  void clear_servicename();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& servicename() const;
  void set_servicename(const ::std::string& value);
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  ::std::string* mutable_servicename();
  ::std::string* release_servicename();
  void set_allocated_servicename(::std::string* servicename);

  // optional .lrpc.Endpoint endpoint = 2;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 2;
  const ::lrpc::Endpoint& endpoint() const;
  ::lrpc::Endpoint* mutable_endpoint();
  ::lrpc::Endpoint* release_endpoint();
  void set_allocated_endpoint(::lrpc::Endpoint* endpoint);

  // @@protoc_insertion_point(class_scope:lrpc.KeepaliveInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr servicename_;
  ::lrpc::Endpoint* endpoint_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lrpc_2eproto();
  friend void protobuf_AssignDesc_lrpc_2eproto();
  friend void protobuf_ShutdownFile_lrpc_2eproto();

  void InitAsDefaultInstance();
  static KeepaliveInfo* default_instance_;
};
// -------------------------------------------------------------------

class ServiceName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lrpc.ServiceName) */ {
 public:
  ServiceName();
  virtual ~ServiceName();

  ServiceName(const ServiceName& from);

  inline ServiceName& operator=(const ServiceName& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceName& default_instance();

  void Swap(ServiceName* other);

  // implements Message ----------------------------------------------

  inline ServiceName* New() const { return New(NULL); }

  ServiceName* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceName& from);
  void MergeFrom(const ServiceName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:lrpc.ServiceName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lrpc_2eproto();
  friend void protobuf_AssignDesc_lrpc_2eproto();
  friend void protobuf_ShutdownFile_lrpc_2eproto();

  void InitAsDefaultInstance();
  static ServiceName* default_instance_;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lrpc.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  void Swap(Status* other);

  // implements Message ----------------------------------------------

  inline Status* New() const { return New(NULL); }

  Status* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lrpc.Status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lrpc_2eproto();
  friend void protobuf_AssignDesc_lrpc_2eproto();
  friend void protobuf_ShutdownFile_lrpc_2eproto();

  void InitAsDefaultInstance();
  static Status* default_instance_;
};
// ===================================================================

class NameService_Stub;

class NameService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline NameService() {};
 public:
  virtual ~NameService();

  typedef NameService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetEndpoints(::google::protobuf::RpcController* controller,
                       const ::lrpc::ServiceName* request,
                       ::lrpc::EndpointList* response,
                       ::google::protobuf::Closure* done);
  virtual void Keepalive(::google::protobuf::RpcController* controller,
                       const ::lrpc::KeepaliveInfo* request,
                       ::lrpc::Status* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(NameService);
};

class NameService_Stub : public NameService {
 public:
  NameService_Stub(::google::protobuf::RpcChannel* channel);
  NameService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~NameService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements NameService ------------------------------------------

  void GetEndpoints(::google::protobuf::RpcController* controller,
                       const ::lrpc::ServiceName* request,
                       ::lrpc::EndpointList* response,
                       ::google::protobuf::Closure* done);
  void Keepalive(::google::protobuf::RpcController* controller,
                       const ::lrpc::KeepaliveInfo* request,
                       ::lrpc::Status* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(NameService_Stub);
};


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional int32 id = 1;
inline void Request::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Request::id() const {
  // @@protoc_insertion_point(field_get:lrpc.Request.id)
  return id_;
}
inline void Request::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:lrpc.Request.id)
}

// optional string service_name = 2;
inline void Request::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::service_name() const {
  // @@protoc_insertion_point(field_get:lrpc.Request.service_name)
  return service_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lrpc.Request.service_name)
}
inline void Request::set_service_name(const char* value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lrpc.Request.service_name)
}
inline void Request::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lrpc.Request.service_name)
}
inline ::std::string* Request::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:lrpc.Request.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_service_name() {
  // @@protoc_insertion_point(field_release:lrpc.Request.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:lrpc.Request.service_name)
}

// optional string method_name = 3;
inline void Request::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::method_name() const {
  // @@protoc_insertion_point(field_get:lrpc.Request.method_name)
  return method_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_method_name(const ::std::string& value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lrpc.Request.method_name)
}
inline void Request::set_method_name(const char* value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lrpc.Request.method_name)
}
inline void Request::set_method_name(const char* value, size_t size) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lrpc.Request.method_name)
}
inline ::std::string* Request::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:lrpc.Request.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_method_name() {
  // @@protoc_insertion_point(field_release:lrpc.Request.method_name)
  
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:lrpc.Request.method_name)
}

// optional bytes serialized_request = 4;
inline void Request::clear_serialized_request() {
  serialized_request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::serialized_request() const {
  // @@protoc_insertion_point(field_get:lrpc.Request.serialized_request)
  return serialized_request_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_serialized_request(const ::std::string& value) {
  
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lrpc.Request.serialized_request)
}
inline void Request::set_serialized_request(const char* value) {
  
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lrpc.Request.serialized_request)
}
inline void Request::set_serialized_request(const void* value, size_t size) {
  
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lrpc.Request.serialized_request)
}
inline ::std::string* Request::mutable_serialized_request() {
  
  // @@protoc_insertion_point(field_mutable:lrpc.Request.serialized_request)
  return serialized_request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_serialized_request() {
  // @@protoc_insertion_point(field_release:lrpc.Request.serialized_request)
  
  return serialized_request_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_serialized_request(::std::string* serialized_request) {
  if (serialized_request != NULL) {
    
  } else {
    
  }
  serialized_request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized_request);
  // @@protoc_insertion_point(field_set_allocated:lrpc.Request.serialized_request)
}

// -------------------------------------------------------------------

// Error

// optional int32 errnum = 1;
inline void Error::clear_errnum() {
  errnum_ = 0;
}
inline ::google::protobuf::int32 Error::errnum() const {
  // @@protoc_insertion_point(field_get:lrpc.Error.errnum)
  return errnum_;
}
inline void Error::set_errnum(::google::protobuf::int32 value) {
  
  errnum_ = value;
  // @@protoc_insertion_point(field_set:lrpc.Error.errnum)
}

// optional string msg = 2;
inline void Error::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error::msg() const {
  // @@protoc_insertion_point(field_get:lrpc.Error.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lrpc.Error.msg)
}
inline void Error::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lrpc.Error.msg)
}
inline void Error::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lrpc.Error.msg)
}
inline ::std::string* Error::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:lrpc.Error.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_msg() {
  // @@protoc_insertion_point(field_release:lrpc.Error.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:lrpc.Error.msg)
}

// -------------------------------------------------------------------

// Response

// optional int32 id = 1;
inline void Response::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Response::id() const {
  // @@protoc_insertion_point(field_get:lrpc.Response.id)
  return id_;
}
inline void Response::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:lrpc.Response.id)
}

// optional bytes serialized_response = 2;
inline bool Response::has_serialized_response() const {
  return Body_case() == kSerializedResponse;
}
inline void Response::set_has_serialized_response() {
  _oneof_case_[0] = kSerializedResponse;
}
inline void Response::clear_serialized_response() {
  if (has_serialized_response()) {
    Body_.serialized_response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Body();
  }
}
inline const ::std::string& Response::serialized_response() const {
  // @@protoc_insertion_point(field_get:lrpc.Response.serialized_response)
  if (has_serialized_response()) {
    return Body_.serialized_response_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Response::set_serialized_response(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lrpc.Response.serialized_response)
  if (!has_serialized_response()) {
    clear_Body();
    set_has_serialized_response();
    Body_.serialized_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Body_.serialized_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lrpc.Response.serialized_response)
}
inline void Response::set_serialized_response(const char* value) {
  if (!has_serialized_response()) {
    clear_Body();
    set_has_serialized_response();
    Body_.serialized_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Body_.serialized_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lrpc.Response.serialized_response)
}
inline void Response::set_serialized_response(const void* value, size_t size) {
  if (!has_serialized_response()) {
    clear_Body();
    set_has_serialized_response();
    Body_.serialized_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Body_.serialized_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lrpc.Response.serialized_response)
}
inline ::std::string* Response::mutable_serialized_response() {
  if (!has_serialized_response()) {
    clear_Body();
    set_has_serialized_response();
    Body_.serialized_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:lrpc.Response.serialized_response)
  return Body_.serialized_response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_serialized_response() {
  // @@protoc_insertion_point(field_release:lrpc.Response.serialized_response)
  if (has_serialized_response()) {
    clear_has_Body();
    return Body_.serialized_response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_serialized_response(::std::string* serialized_response) {
  if (!has_serialized_response()) {
    Body_.serialized_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Body();
  if (serialized_response != NULL) {
    set_has_serialized_response();
    Body_.serialized_response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        serialized_response);
  }
  // @@protoc_insertion_point(field_set_allocated:lrpc.Response.serialized_response)
}

// optional .lrpc.Error error = 3;
inline bool Response::has_error() const {
  return Body_case() == kError;
}
inline void Response::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void Response::clear_error() {
  if (has_error()) {
    delete Body_.error_;
    clear_has_Body();
  }
}
inline  const ::lrpc::Error& Response::error() const {
  // @@protoc_insertion_point(field_get:lrpc.Response.error)
  return has_error()
      ? *Body_.error_
      : ::lrpc::Error::default_instance();
}
inline ::lrpc::Error* Response::mutable_error() {
  if (!has_error()) {
    clear_Body();
    set_has_error();
    Body_.error_ = new ::lrpc::Error;
  }
  // @@protoc_insertion_point(field_mutable:lrpc.Response.error)
  return Body_.error_;
}
inline ::lrpc::Error* Response::release_error() {
  // @@protoc_insertion_point(field_release:lrpc.Response.error)
  if (has_error()) {
    clear_has_Body();
    ::lrpc::Error* temp = Body_.error_;
    Body_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_error(::lrpc::Error* error) {
  clear_Body();
  if (error) {
    set_has_error();
    Body_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:lrpc.Response.error)
}

inline bool Response::has_Body() const {
  return Body_case() != BODY_NOT_SET;
}
inline void Response::clear_has_Body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline Response::BodyCase Response::Body_case() const {
  return Response::BodyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RpcMessage

// optional .lrpc.Request request = 1;
inline bool RpcMessage::has_request() const {
  return Body_case() == kRequest;
}
inline void RpcMessage::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline void RpcMessage::clear_request() {
  if (has_request()) {
    delete Body_.request_;
    clear_has_Body();
  }
}
inline  const ::lrpc::Request& RpcMessage::request() const {
  // @@protoc_insertion_point(field_get:lrpc.RpcMessage.request)
  return has_request()
      ? *Body_.request_
      : ::lrpc::Request::default_instance();
}
inline ::lrpc::Request* RpcMessage::mutable_request() {
  if (!has_request()) {
    clear_Body();
    set_has_request();
    Body_.request_ = new ::lrpc::Request;
  }
  // @@protoc_insertion_point(field_mutable:lrpc.RpcMessage.request)
  return Body_.request_;
}
inline ::lrpc::Request* RpcMessage::release_request() {
  // @@protoc_insertion_point(field_release:lrpc.RpcMessage.request)
  if (has_request()) {
    clear_has_Body();
    ::lrpc::Request* temp = Body_.request_;
    Body_.request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RpcMessage::set_allocated_request(::lrpc::Request* request) {
  clear_Body();
  if (request) {
    set_has_request();
    Body_.request_ = request;
  }
  // @@protoc_insertion_point(field_set_allocated:lrpc.RpcMessage.request)
}

// optional .lrpc.Response response = 2;
inline bool RpcMessage::has_response() const {
  return Body_case() == kResponse;
}
inline void RpcMessage::set_has_response() {
  _oneof_case_[0] = kResponse;
}
inline void RpcMessage::clear_response() {
  if (has_response()) {
    delete Body_.response_;
    clear_has_Body();
  }
}
inline  const ::lrpc::Response& RpcMessage::response() const {
  // @@protoc_insertion_point(field_get:lrpc.RpcMessage.response)
  return has_response()
      ? *Body_.response_
      : ::lrpc::Response::default_instance();
}
inline ::lrpc::Response* RpcMessage::mutable_response() {
  if (!has_response()) {
    clear_Body();
    set_has_response();
    Body_.response_ = new ::lrpc::Response;
  }
  // @@protoc_insertion_point(field_mutable:lrpc.RpcMessage.response)
  return Body_.response_;
}
inline ::lrpc::Response* RpcMessage::release_response() {
  // @@protoc_insertion_point(field_release:lrpc.RpcMessage.response)
  if (has_response()) {
    clear_has_Body();
    ::lrpc::Response* temp = Body_.response_;
    Body_.response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RpcMessage::set_allocated_response(::lrpc::Response* response) {
  clear_Body();
  if (response) {
    set_has_response();
    Body_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:lrpc.RpcMessage.response)
}

inline bool RpcMessage::has_Body() const {
  return Body_case() != BODY_NOT_SET;
}
inline void RpcMessage::clear_has_Body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline RpcMessage::BodyCase RpcMessage::Body_case() const {
  return RpcMessage::BodyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Endpoint

// optional string ip = 1;
inline void Endpoint::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Endpoint::ip() const {
  // @@protoc_insertion_point(field_get:lrpc.Endpoint.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Endpoint::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lrpc.Endpoint.ip)
}
inline void Endpoint::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lrpc.Endpoint.ip)
}
inline void Endpoint::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lrpc.Endpoint.ip)
}
inline ::std::string* Endpoint::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:lrpc.Endpoint.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Endpoint::release_ip() {
  // @@protoc_insertion_point(field_release:lrpc.Endpoint.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Endpoint::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:lrpc.Endpoint.ip)
}

// optional int32 port = 2;
inline void Endpoint::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 Endpoint::port() const {
  // @@protoc_insertion_point(field_get:lrpc.Endpoint.port)
  return port_;
}
inline void Endpoint::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:lrpc.Endpoint.port)
}

// -------------------------------------------------------------------

// EndpointList

// repeated .lrpc.Endpoint endpoints = 1;
inline int EndpointList::endpoints_size() const {
  return endpoints_.size();
}
inline void EndpointList::clear_endpoints() {
  endpoints_.Clear();
}
inline const ::lrpc::Endpoint& EndpointList::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:lrpc.EndpointList.endpoints)
  return endpoints_.Get(index);
}
inline ::lrpc::Endpoint* EndpointList::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:lrpc.EndpointList.endpoints)
  return endpoints_.Mutable(index);
}
inline ::lrpc::Endpoint* EndpointList::add_endpoints() {
  // @@protoc_insertion_point(field_add:lrpc.EndpointList.endpoints)
  return endpoints_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::lrpc::Endpoint >*
EndpointList::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:lrpc.EndpointList.endpoints)
  return &endpoints_;
}
inline const ::google::protobuf::RepeatedPtrField< ::lrpc::Endpoint >&
EndpointList::endpoints() const {
  // @@protoc_insertion_point(field_list:lrpc.EndpointList.endpoints)
  return endpoints_;
}

// -------------------------------------------------------------------

// KeepaliveInfo

// optional string serviceName = 1;
inline void KeepaliveInfo::clear_servicename() {
  servicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeepaliveInfo::servicename() const {
  // @@protoc_insertion_point(field_get:lrpc.KeepaliveInfo.serviceName)
  return servicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeepaliveInfo::set_servicename(const ::std::string& value) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lrpc.KeepaliveInfo.serviceName)
}
inline void KeepaliveInfo::set_servicename(const char* value) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lrpc.KeepaliveInfo.serviceName)
}
inline void KeepaliveInfo::set_servicename(const char* value, size_t size) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lrpc.KeepaliveInfo.serviceName)
}
inline ::std::string* KeepaliveInfo::mutable_servicename() {
  
  // @@protoc_insertion_point(field_mutable:lrpc.KeepaliveInfo.serviceName)
  return servicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeepaliveInfo::release_servicename() {
  // @@protoc_insertion_point(field_release:lrpc.KeepaliveInfo.serviceName)
  
  return servicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeepaliveInfo::set_allocated_servicename(::std::string* servicename) {
  if (servicename != NULL) {
    
  } else {
    
  }
  servicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servicename);
  // @@protoc_insertion_point(field_set_allocated:lrpc.KeepaliveInfo.serviceName)
}

// optional .lrpc.Endpoint endpoint = 2;
inline bool KeepaliveInfo::has_endpoint() const {
  return !_is_default_instance_ && endpoint_ != NULL;
}
inline void KeepaliveInfo::clear_endpoint() {
  if (GetArenaNoVirtual() == NULL && endpoint_ != NULL) delete endpoint_;
  endpoint_ = NULL;
}
inline const ::lrpc::Endpoint& KeepaliveInfo::endpoint() const {
  // @@protoc_insertion_point(field_get:lrpc.KeepaliveInfo.endpoint)
  return endpoint_ != NULL ? *endpoint_ : *default_instance_->endpoint_;
}
inline ::lrpc::Endpoint* KeepaliveInfo::mutable_endpoint() {
  
  if (endpoint_ == NULL) {
    endpoint_ = new ::lrpc::Endpoint;
  }
  // @@protoc_insertion_point(field_mutable:lrpc.KeepaliveInfo.endpoint)
  return endpoint_;
}
inline ::lrpc::Endpoint* KeepaliveInfo::release_endpoint() {
  // @@protoc_insertion_point(field_release:lrpc.KeepaliveInfo.endpoint)
  
  ::lrpc::Endpoint* temp = endpoint_;
  endpoint_ = NULL;
  return temp;
}
inline void KeepaliveInfo::set_allocated_endpoint(::lrpc::Endpoint* endpoint) {
  delete endpoint_;
  endpoint_ = endpoint;
  if (endpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lrpc.KeepaliveInfo.endpoint)
}

// -------------------------------------------------------------------

// ServiceName

// optional string name = 1;
inline void ServiceName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceName::name() const {
  // @@protoc_insertion_point(field_get:lrpc.ServiceName.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lrpc.ServiceName.name)
}
inline void ServiceName::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lrpc.ServiceName.name)
}
inline void ServiceName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lrpc.ServiceName.name)
}
inline ::std::string* ServiceName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lrpc.ServiceName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceName::release_name() {
  // @@protoc_insertion_point(field_release:lrpc.ServiceName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lrpc.ServiceName.name)
}

// -------------------------------------------------------------------

// Status

// optional int32 result = 1;
inline void Status::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 Status::result() const {
  // @@protoc_insertion_point(field_get:lrpc.Status.result)
  return result_;
}
inline void Status::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:lrpc.Status.result)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lrpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::lrpc::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lrpc::MessageType>() {
  return ::lrpc::MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lrpc_2eproto__INCLUDED
